// Code generated by Genstrument. DO NOT EDIT.

package {{ .Package }}

import (
{{- range $i := .Imports }}
{{- if (not (eq $i.Name $i.Package)) }}
    {{ $i.Name }} "{{ $i.PkgPath }}"
{{- else }}
    "{{ $i.PkgPath }}"
{{- end }}
{{- end }}
)
{{ range $t := .Types }}
{{- $typeName := $t.QualifiedName }}
// {{ $t.ConstructorName }} adds APM traces around the wrapped {{ $typeName }} using the provided tracer.
func {{ $t.ConstructorName }}{{ $t.TypeParamSpec }}(tracer genstrument.Tracer, wrapped {{ $typeName }}{{ $t.TypeParamNames }}) {{ $typeName }}{{ $t.TypeParamNames }} {
    return &{{ $t.TypeName }}{{ $t.TypeParamNames }}{
        tracer: tracer,
        wrapped: wrapped,
    }
}

{{- if $t.ExternalType }}
// compile-time type check to keep {{ $t.QualifiedName }} and {{ $t.Name }} in sync.
// if this results in a compile error, it means they are not identical and this must be fixed.
{{- if $t.TypeParamSpec }}
func _typecheck_{{ $t.Name }}{{ $t.TypeParamSpec }}() {{ $t.QualifiedName }}{{ $t.TypeParamNames }} {
  return *new({{ $t.Name }}{{ $t.TypeParamNames }})
}
{{- else }}
var _ {{ $t.QualifiedName }} = *new({{ $t.Name }})
{{- end }}
{{- end }}

type {{ $t.TypeName }}{{ $t.TypeParamSpec }} struct {
    wrapped {{ $typeName }}{{ $t.TypeParamNames }}
    tracer genstrument.Tracer
}
{{ range $f := $t.Functions }}
func (w *{{ $t.TypeName }}{{ $t.TypeParamNames }}) {{ $f.Name }}({{ $f | arg_list }}) {{$f | return_list}} {
    // Start Span
    var span genstrument.Span
    {{- if $f.ContextVar }}
    {{ $f.ContextVar }}
    {{- end }}
    {{ $f.ContextArg }}, span = w.tracer.StartSpan({{ $f.ContextArg }},"{{ $f.OperationName }}")

    {{- if $f.ArgHasAttributes }}
    // Set Input Attributes
    {{- range $arg := $f.Arguments }}
    {{- if $arg.AttrKey }}
    {{ $arg.AttrFunc }}({{ $arg.Name }},span.Attribute({{ $arg.AttrKey | quote }}))
    {{- end }}
    {{- end }}
    {{- end }}

    // call Wrapped Function
    {{ $f | assign_result_list }} w.wrapped.{{ $f.Name }}({{ $f | call_list }})

    {{- if $f.ErrorReturn }}
    // Finish Span with Error
    if {{ $f.ErrorReturn }} != nil {
        span.EndError({{ $f.ErrorReturn }})
        return
    }
    {{- end }}

    {{- if $f.ReturnHasAttributes }}
    // Set Return Attributes
    {{- range $arg := $f.Returns }}
    {{- if $arg.AttrKey }}
    {{ $arg.AttrFunc }}({{ $arg.Name }},span.Attribute({{ $arg.AttrKey | quote }}))
    {{- end }}
    {{- end }}
    {{- end }}

    // Finish Span with Success
    span.EndSuccess({{ $f.ContextArg }})
    return
}
{{ end }}
{{- end }}

{{- range $f := .Functions }}
// {{ $f.WrapperName }} traces the given fn using the provided tracer {{ $f.TracerArg }}.
func {{ $f.WrapperName }}{{ $f.TypeParamSpec }}({{ $f.TracerArg }} genstrument.Tracer) func({{ $f | arg_list }}) {{$f | return_list}}  {
    return func({{ $f | arg_list }}) {{$f | return_list}} {
        var span genstrument.Span
        {{- if $f.ContextVar }}
        {{ $f.ContextVar }}
        {{- end }}
        {{ $f.ContextArg }}, span = {{ $f.TracerArg }}.StartSpan({{ $f.ContextArg }},"{{ $f.OperationName }}")

        {{- if $f.ArgHasAttributes }}
        // Set Input Attributes
        {{- range $arg := $f.Arguments }}
        {{- if $arg.AttrFunc }}
        {{ $arg.AttrFunc }}({{ $arg.Name }},span.Attribute({{ $arg.AttrKey | quote }}))
        {{- end }}
        {{- end }}
        {{- end }}

        // call Wrapped Function
        {{ $f | assign_result_list }} {{ $f.QualifiedName }}{{ $f.TypeParamNames }}({{ $f | call_list }})

        {{- if $f.ErrorReturn }}
        // Finish Span with Error
        if {{ $f.ErrorReturn }} != nil {
            span.EndError({{ $f.ErrorReturn }})
            return
        }
        {{- end }}

        {{- if $f.ReturnHasAttributes }}
        // Set Return Attributes
        {{- range $arg := $f.Returns }}
        {{- if $arg.AttrKey }}
        {{ $arg.AttrFunc }}({{ $arg.Name }},span.Attribute({{ $arg.AttrKey | quote }}))
        {{- end }}
        {{- end }}
        {{- end }}

        // Finish Span with Success
        span.EndSuccess({{ $f.ContextArg }})
        return
    }
}
{{ end }}