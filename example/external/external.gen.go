// Code generated by Genstrument. DO NOT EDIT.

package external

import (
	"cmp"
	"context"
	"genstrument/example"
	"genstrument/example/types"
	"genstrument/example/types/dot"
	"github.com/justenwalker/genstrument"
)

// InstrumentSimpleService adds APM traces around the wrapped example.SimpleService using the provided tracer.
func InstrumentSimpleService(tracer genstrument.Tracer, wrapped example.SimpleService) example.SimpleService {
	return &instrumentedSimpleService{
		tracer:  tracer,
		wrapped: wrapped,
	}
}

// compile-time type check to keep example.SimpleService and SimpleService in sync.
// if this results in a compile error, it means they are not identical and this must be fixed.
var _ example.SimpleService = *new(SimpleService)

type instrumentedSimpleService struct {
	wrapped example.SimpleService
	tracer  genstrument.Tracer
}

func (w *instrumentedSimpleService) SayHello(ctx context.Context, message string) (result string, err error) {
	// Start Span
	var span genstrument.Span
	ctx, span = w.tracer.StartSpan(ctx, "goPkg2")

	// call Wrapped Function
	result, err = w.wrapped.SayHello(ctx, message)
	// Finish Span with Error
	if err != nil {
		span.EndError(err)
		return
	}

	// Finish Span with Success
	span.EndSuccess(ctx)
	return
}

// TraceGenericService adds APM traces around the wrapped example.GenericService using the provided tracer.
func TraceGenericService[T any, PT cmp.Ordered](tracer genstrument.Tracer, wrapped example.GenericService[T, PT]) example.GenericService[T, PT] {
	return &tracedGenericService[T, PT]{
		tracer:  tracer,
		wrapped: wrapped,
	}
}

// compile-time type check to keep example.GenericService and GenericService in sync.
// if this results in a compile error, it means they are not identical and this must be fixed.
func _typecheck_GenericService[T any, PT cmp.Ordered]() example.GenericService[T, PT] {
	return *new(GenericService[T, PT])
}

type tracedGenericService[T any, PT cmp.Ordered] struct {
	wrapped example.GenericService[T, PT]
	tracer  genstrument.Tracer
}

func (w *tracedGenericService[T, PT]) FuncIsGeneric(ctx context.Context, t T) (ret0 PT, err error) {
	// Start Span
	var span genstrument.Span
	ctx, span = w.tracer.StartSpan(ctx, "external.GenericService:FuncIsGeneric")

	// call Wrapped Function
	ret0, err = w.wrapped.FuncIsGeneric(ctx, t)
	// Finish Span with Error
	if err != nil {
		span.EndError(err)
		return
	}

	// Finish Span with Success
	span.EndSuccess(ctx)
	return
}

// TraceMyFunction traces the given fn using the provided tracer tr.
func TraceMyFunction(tr genstrument.Tracer) func(ctx context.Context, s example.ServiceType, d1 dot.Type1Dot, d2 dot.Type2Dot, myType types.MyType) (ret0 []byte, err error) {
	return func(ctx context.Context, s example.ServiceType, d1 dot.Type1Dot, d2 dot.Type2Dot, myType types.MyType) (ret0 []byte, err error) {
		var span genstrument.Span
		ctx, span = tr.StartSpan(ctx, "func1")
		// Set Input Attributes
		example.AnyTypeSetter(s, span.Attribute("key1"))
		example.AnyTypeSetter(d1, span.Attribute("key2"))
		example.AnyTypeSetter(d2, span.Attribute("key3"))
		example.AnyTypeSetter(myType, span.Attribute("key4"))

		// call Wrapped Function
		ret0, err = example.MyFunction(ctx, s, d1, d2, myType)
		// Finish Span with Error
		if err != nil {
			span.EndError(err)
			return
		}

		// Finish Span with Success
		span.EndSuccess(ctx)
		return
	}
}

// TraceGenericFunction traces the given fn using the provided tracer tr.
func TraceGenericFunction[T ~string, PT *T, PTT cmp.Ordered](tr genstrument.Tracer) func(ctx context.Context, t T, tr0 PT, pt PT, err PTT) (ret0 example.ServiceType, err1 error) {
	return func(ctx context.Context, t T, tr0 PT, pt PT, err PTT) (ret0 example.ServiceType, err1 error) {
		var span genstrument.Span
		ctx, span = tr.StartSpan(ctx, "external:GenericFunction")
		// Set Input Attributes
		example.AnyTypeSetter(t, span.Attribute("key1"))
		example.AnyTypeSetter(tr0, span.Attribute("key2"))
		example.AnyTypeSetter(pt, span.Attribute("key3"))
		example.AnyTypeSetter(err, span.Attribute("key4"))

		// call Wrapped Function
		ret0, err1 = example.GenericFunction[T, PT, PTT](ctx, t, tr0, pt, err)
		// Finish Span with Error
		if err1 != nil {
			span.EndError(err1)
			return
		}

		// Finish Span with Success
		span.EndSuccess(ctx)
		return
	}
}
